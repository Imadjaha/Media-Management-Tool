package com.example.backend.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;

import com.example.backend.dto.CategoryDTO;
import com.example.backend.dto.MediaCreationDTO;
import com.example.backend.dto.MediaWithCategoriesDTO;
import com.example.backend.dto.MediaWithCategoriesProjection;
import com.example.backend.model.CategoryEntity;
import com.example.backend.model.MediaCategory;
import com.example.backend.model.MediaEntity;
import com.example.backend.model.MediaState;
import com.example.backend.model.MediaType;
import com.example.backend.model.UserEntity;
import com.example.backend.repository.CategoryRepository;
import com.example.backend.repository.MediaCategoryRepository;
import com.example.backend.repository.MediaRepository;

@Service
public class MediaService {

  private final MediaRepository mediaRepository;
  private final CategoryRepository categoryRepository;
  private final MediaCategoryRepository mediaCategoryRepository;

  @Autowired
  private final UserService userService;

  public MediaService(
    MediaRepository mediaRepository,
    UserService userService,
    CategoryRepository categoryRepository,
    MediaCategoryRepository mediaCategoryRepository
  ) {
    this.userService = userService;
    this.mediaRepository = mediaRepository;
    this.categoryRepository = categoryRepository;
    this.mediaCategoryRepository = mediaCategoryRepository;
  }

  public List<MediaWithCategoriesDTO> getAllMediaByUsernameWithCategories(
    String username
  ) {
    UserEntity user = userService
      .getUserByUsername(username)
      .orElseThrow(() -> new RuntimeException("User not found"));

    Long userId = user.getUserId();

    // Using 'categoryPairs' projection to aggregate categories
    List<MediaWithCategoriesProjection> rawResults = mediaRepository.findMediaWithCategoriesByUserId(
      userId
    );

    List<MediaWithCategoriesDTO> dtos = new ArrayList<>();
    for (MediaWithCategoriesProjection row : rawResults) {
      dtos.add(MediaWithCategoriesDTO.fromProjection(row));
    }

    return dtos;
  }

  public List<MediaEntity> getAllMedia() {
    return mediaRepository.findAll();
  }

  public List<MediaEntity> getAllMediaByUsername(String username) {
    Optional<UserEntity> userOptional = userService.getUserByUsername(username);
    if (userOptional.isEmpty()) {
      throw new RuntimeException("User not found");
    }
    UserEntity user = userOptional.get();
    return mediaRepository.findByUserUserId(user.getUserId());
  }

  public Optional<MediaEntity> getMediaById(Long mediaId) {
    return mediaRepository.findById(mediaId);
  }

  public List<MediaEntity> getMediaByUserId(Long userId) {
    return mediaRepository.findByUserUserId(userId);
  }

  public void seedMedia(int count) {
    UserEntity user = userService
      .getUserByUsername("12345")
      .orElseThrow(() -> new RuntimeException("User not found"));
    for (int i = 1; i <= 8000; i++) {
      MediaEntity media = new MediaEntity();
      media.setUser(user);
      media.setTitle("Test Media " + i);
      media.setProducer("AutoGenerated");
      media.setType(MediaType.BOOK);
      media.setMediaState(MediaState.AVAILABLE);
      media.setIsbn("ISBN-" + i);
      media.setIsFavorite(false);
      mediaRepository.save(media);
    }
  }

  public MediaWithCategoriesDTO addToFavorite(
    Long mediaId,
    MediaEntity modifyMedia,
    Authentication authentication
  ) {
    String username = authentication.getName();
    Optional<UserEntity> userOptional = userService.getUserByUsername(username);

    if (userOptional.isEmpty()) {
      throw new RuntimeException("User not found");
    }

    UserEntity user = userOptional.get();

    MediaEntity currentMedia = mediaRepository
      .findById(mediaId)
      .orElseThrow(() -> new RuntimeException("Media not found"));

    // Ensure the media belongs to the current user (optional access check)
    if (!currentMedia.getUser().getUserId().equals(user.getUserId())) {
      throw new RuntimeException(
        "You don't have permission to modify this media."
      );
    }

    // Update isFavorite based on the incoming 'modifyMedia'
    currentMedia.setIsFavorite(modifyMedia.getIsFavorite());

    currentMedia = mediaRepository.save(currentMedia);

    // Now build a MediaWithCategoriesDTO from 'currentMedia'
    MediaWithCategoriesDTO dto = new MediaWithCategoriesDTO();
    dto.setMediaId(currentMedia.getMediaId());
    dto.setUserId(user.getUserId());
    dto.setProducer(currentMedia.getProducer());
    dto.setTitle(currentMedia.getTitle());
    dto.setMediaState(currentMedia.getMediaState().name());
    dto.setType(currentMedia.getType().name());
    dto.setReleaseYear(currentMedia.getReleaseYear());
    dto.setNotes(currentMedia.getNotes());
    dto.setIsbn(currentMedia.getIsbn());
    dto.setIsFavorite(currentMedia.getIsFavorite());
    dto.setCreatedAt(currentMedia.getCreatedAt());

    // Convert each linked MediaCategory -> CategoryDTO
    if (currentMedia.getMediaCategories() != null) {
      currentMedia
        .getMediaCategories()
        .forEach(mc -> {
          CategoryEntity cat = mc.getCategory();
          if (cat != null) {
            CategoryDTO catDTO = new CategoryDTO();
            catDTO.setCategoryId(cat.getCategoryId());
            catDTO.setCategoryName(cat.getCategoryName());
            dto.getCategories().add(catDTO);
          }
        });
    }

    return dto;
  }

  public List<MediaEntity> getMediaByMediaState(MediaState mediaState) {
    return mediaRepository.findByMediaState(mediaState);
  }

  public List<MediaEntity> getMediaByType(MediaType type) {
    return mediaRepository.findByType(type);
  }

  public List<MediaEntity> getFavoriteMedia() {
    return mediaRepository.findByIsFavorite(true);
  }

  public Optional<MediaEntity> getMediaByIsbn(String isbn) {
    return mediaRepository.findByIsbn(isbn);
  }

  public MediaWithCategoriesDTO createMedia(
    MediaCreationDTO media,
    Authentication authentication
  ) {
    String username = authentication.getName();
    UserEntity user = userService
      .getUserByUsername(username)
      .orElseThrow(() -> new RuntimeException("User not found"));

    MediaEntity mediaEntity = new MediaEntity();
    mediaEntity.setUser(user);
    mediaEntity.setProducer(media.getProducer());
    mediaEntity.setTitle(media.getTitle());
    mediaEntity.setMediaState(MediaState.valueOf(media.getMediaState()));
    mediaEntity.setType(MediaType.valueOf(media.getType()));
    mediaEntity.setReleaseYear(media.getReleaseYear());
    mediaEntity.setNotes(media.getNotes());
    mediaEntity.setIsbn(media.getIsbn());
    mediaEntity.setIsFavorite(media.getIsFavorite());
    mediaEntity.setCreatedAt(LocalDateTime.now());

    // We'll build the return DTO from the MediaCreationDTO
    MediaWithCategoriesDTO mediaWithCategoriesDTO = new MediaWithCategoriesDTO(
      media
    );

    // For each category ID in the request, find the actual CategoryEntity
    for (Long categoryId : media.getCategories()) {
      CategoryEntity categoryEntity = categoryRepository
        .findById(categoryId)
        .orElseThrow(() -> new RuntimeException("Category not found"));

      MediaCategory mediaCategory = new MediaCategory();
      mediaCategory.setMedia(mediaEntity);
      mediaCategory.setCategory(categoryEntity);
      mediaEntity.getMediaCategories().add(mediaCategory);

      // Also add a CategoryDTO to the return object
      CategoryDTO catDTO = new CategoryDTO();
      catDTO.setCategoryId(categoryEntity.getCategoryId());
      catDTO.setCategoryName(categoryEntity.getCategoryName());
      mediaWithCategoriesDTO.getCategories().add(catDTO);
    }

    mediaRepository.save(mediaEntity);

    mediaWithCategoriesDTO.setMediaId(mediaEntity.getMediaId());
    mediaWithCategoriesDTO.setUserId(user.getUserId());

    return mediaWithCategoriesDTO;
  }

  public MediaEntity updateMedia(
    Long mediaId,
    MediaCreationDTO currentMedia,
    Authentication authentication
  ) {
    String username = authentication.getName();
    UserEntity user = userService
      .getUserByUsername(username)
      .orElseThrow(() -> new RuntimeException("User not found"));

    MediaEntity mediaToUpdate = mediaRepository
      .findById(mediaId)
      .orElseThrow(() -> new RuntimeException("Media not found"));

    // Make sure the media belongs to this user (optional check)
    if (!mediaToUpdate.getUser().getUserId().equals(user.getUserId())) {
      throw new RuntimeException(
        "You don't have permission to update this media."
      );
    }

    mediaToUpdate.setProducer(currentMedia.getProducer());
    mediaToUpdate.setTitle(currentMedia.getTitle());
    mediaToUpdate.setMediaState(
      MediaState.valueOf(currentMedia.getMediaState())
    );
    mediaToUpdate.setType(MediaType.valueOf(currentMedia.getType()));
    mediaToUpdate.setReleaseYear(currentMedia.getReleaseYear());
    mediaToUpdate.setNotes(currentMedia.getNotes());
    mediaToUpdate.setIsbn(currentMedia.getIsbn());
    mediaToUpdate.setIsFavorite(currentMedia.getIsFavorite());

    // --- Clear existing categories & reassign from request ---
    mediaToUpdate.getMediaCategories().clear();

    if (currentMedia.getCategories() != null) {
      for (Long categoryId : currentMedia.getCategories()) {
        CategoryEntity categoryEntity = categoryRepository
          .findById(categoryId)
          .filter(cat -> cat.getUser().getUserId().equals(user.getUserId()))
          .orElseThrow(() ->
            new RuntimeException("Category not found or not owned by user.")
          );

        MediaCategory mc = new MediaCategory();
        mc.setMedia(mediaToUpdate);
        mc.setCategory(categoryEntity);
        mc.setCreatedAt(LocalDateTime.now());

        mediaToUpdate.getMediaCategories().add(mc);
      }
    }

    return mediaRepository.save(mediaToUpdate);
  }

  public MediaEntity assignCategoryToMedia(
    Long mediaId,
    Long categoryId,
    Authentication authentication
  ) {
    String userName = authentication.getName();

    MediaEntity media = mediaRepository
      .findById(mediaId)
      .orElseThrow(() ->
        new IllegalArgumentException("Media not found with ID: " + mediaId)
      );

    // Ensure user owns the media (optional check)
    if (!media.getUser().getUsername().equals(userName)) {
      throw new RuntimeException("You don't own this media.");
    }

    CategoryEntity category = categoryRepository
      .findById(categoryId)
      .filter(cat -> cat.getUser().getUsername().equals(userName))
      .orElseThrow(() ->
        new IllegalArgumentException("Category not found or not owned by user.")
      );

    // Check if already exists
    boolean exists = mediaCategoryRepository.existsByMediaMediaIdAndCategoryCategoryId(
      mediaId,
      categoryId
    );
    if (exists) {
      // we can throw or silently skip
      throw new IllegalArgumentException("Category is already assigned.");
    }

    MediaCategory mediaCategory = new MediaCategory();
    mediaCategory.setMedia(media);
    mediaCategory.setCategory(category);
    mediaCategory.setCreatedAt(LocalDateTime.now());

    mediaCategoryRepository.save(mediaCategory);

    // Return the updated media. Optionally, re-fetch if you need the updated associations
    return mediaRepository
      .findById(mediaId)
      .orElseThrow(() -> new RuntimeException("Error fetching updated media."));
  }

  public void removeCategoryFromMedia(
    Long mediaId,
    Long categoryId,
    Authentication authentication
  ) {
    String username = authentication.getName();

    MediaEntity media = mediaRepository
      .findById(mediaId)
      .orElseThrow(() ->
        new IllegalArgumentException("Media not found with ID: " + mediaId)
      );

    if (!media.getUser().getUsername().equals(username)) {
      throw new RuntimeException("You don't own this media.");
    }

    CategoryEntity category = categoryRepository
      .findById(categoryId)
      .filter(cat -> cat.getUser().getUsername().equals(username))
      .orElseThrow(() ->
        new IllegalArgumentException(
          "Category not found or not owned by the user."
        )
      );

    MediaCategory mediaCategory = mediaCategoryRepository
      .findByMediaMediaIdAndCategoryCategoryId(mediaId, categoryId)
      .orElseThrow(() ->
        new IllegalArgumentException(
          "Category is not associated with this media."
        )
      );

    mediaCategoryRepository.delete(mediaCategory);
  }

  public void deleteMedia(Long mediaId) {
    mediaRepository.deleteById(mediaId);
  }
}
